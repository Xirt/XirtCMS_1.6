<?php

/**
 * List containing simple instances of Item
 *
 * @author     A.G. Gideonse
 * @version    1.6
 * @copyright  XirtCMS 2010 - 2011
 * @package    XirtCMS
 */
class XTranslationList {

   /**
    * @var Integer The integer of the items in the list
    */
   var $xId = null;


   /**
    * @var String with the name of the table containing the information
    */
   var $table = null;


   /**
    * @var Array containing all items
    */
   var $cList = array();


   /**
    * Loads list information from the database
    * NOTE: This method is required to call the _new_ method $this->_load();
    *
    * @param $xId Integer with the xId of the items in the list
    * @return boolean True on succes, false on failure
    */
   public function load($xId) {
      return ($this->table ? !$this->_load($xId) : false);
   }


   /**
    * Loads all content items from the database and adds them to the list
    *
    * @access private
    * @param $xId Integer with the xId of the items in the list
    */
   private function _load($xId) {
      global $xDb;

      $query = "SELECT *
                FROM (
                   SELECT t1.*
                   FROM {$this->table} AS t1
                   INNER JOIN #__languages AS t2 ON t1.language = t2.iso
                   ORDER BY t2.preference, t1.xid
                ) AS t3
                WHERE xid = {$xId}
                ORDER BY xid";
      $xDb->setQuery($query);

      foreach ($xDb->loadObjectList() as $dbRow) {
         $this->_add(new XItem($dbRow), false);
      }

   }



   /***********/
   /*  MODIFY */
   /***********/

   /**
    * Sets an attribute for all translation in the list
    *
    * @param $attrib The variable to set
    * @param $value The value for the given variable
    */
   public function set($attrib, $value) {

      foreach ($this->cList as $translation) {

         $translation->set($attrib, $value);
         $translation->saveToDatabase($this->table);

      }

   }


   /**
    * Adds a new item
    *
    * @param $item The item to add
    * @return boolean True
    */
   public function add($item) {
      return $this->_add($item);
   }


   /**
    * Adds an item
    *
    * @param $item The item to add
    * @param $doSave Toggles saving to the preconfigured database (optional)
    * @return boolean true
    */
   public function _add($item, $doSave = true) {
      global $xDb;

      if ($this->table && $doSave) {
         $item = XTools::addslashes($item);
         $xDb->insert($this->table, $item);
      }

      $this->cList[] = $item;

      return true;
   }



   /*****************/
   /* MISCELLANEOUS */
   /*****************/

   /**
    * Returns first occurence of an item by field
    *
    * @deprecated
    * @param $attrib String containing the field name to search in
    * @param $value String containing the string to search for
    * @return mixed The found item or null on failure
    */
   public function getItemByField($attrib, $value) {
      return $this->getItemByAttribute($attrib, $value);
   }


   /**
    * Returns first occurence of an item by field
    *
    * @deprecated
    * @param $attrib String containing the field name to search in
    * @param $value String containing the string to search for
    * @return mixed The found item or null on failure
    */
   public function getItemByAttribute($attrib, $value) {

      foreach ($this->cList as $item) {
         if ($item->$attrib == $value) {
            return $item;
         }
      }

      return null;
   }


   /**
    * Returns all items in the list
    *
    * @deprecated
    * @return Array All items in the list
    */
   public function getList() {
      return $this->toArray();
   }


   /**
    * Returns all items in the list
    *
    * @return Array All items in the list
    */
   public function toArray() {
      return $this->cList;
   }


   /**
    * Returns the amount of items in the list
    *
    * @return Int The amount of items in the list
    */
   public function count() {
      return count($this->cList);
   }


   /**
    * Returns list as a JSON Object
    */
   public function encode() {
      return json_encode($this->cList);
   }


   /**
    * Shows list as JSON Object
    */
   public function show() {

      header('Content-type: application/x-json');
      die($this->encode());

   }

}
?>
